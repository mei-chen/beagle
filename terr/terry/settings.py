"""
Django settings for terry project.

Generated by 'django-admin startproject' using Django 1.10.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os

# Third Party
from dotenv import load_dotenv, find_dotenv
import dj_database_url

# Loading the environmental variables
load_dotenv(find_dotenv())

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SESSION_SECRET', '653f9ffc8edf828ea760d681b09eaa8fa49c284f')

DEBUG = int(os.environ.get('DEBUG', 0)) == 1
HOT_LOAD = int(os.environ.get('HOT_LOAD', 0)) == 1

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    # Third party
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.bitbucket_oauth2',
    'allauth.socialaccount.providers.github',
    'allauth.socialaccount.providers.gitlab',
    'rest_framework',
    'paypal.standard.ipn',
    'watchman',

    # Project
    'core',
    'realtime',
    'portal',
    'reports',
    'marketing',
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'terry.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, "portal", "templates")
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'terry.wsgi.application'


######################################################################################
#
#  DATABASE
#
######################################################################################
DATABASES = {
    'default': dj_database_url.config()
}

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

HOT_LOAD = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.environ.get('STATIC_ASSET_PATH')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "portal", "static"),
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.environ.get('MEDIA_ROOT')

REDIS_URL = os.environ.get('REDIS_URL')
EMAIL_BACKEND = "sgbackend.SendGridBackend"
SENDGRID_API_KEY = ""

ACCOUNT_LOGOUT_REDIRECT_URL = '/'
LOGIN_REDIRECT_URL = '/'
ACCOUNT_LOGOUT_ON_GET = True

ACCOUNT_EMAIL_REQUIRED = True

# Watchman settings

DEFAULT_WATCHMAN_CHECKS = [
    # 'watchman.checks.caches',
    'watchman.checks.storage',
    'watchman.checks.databases',
]

CUSTOM_WATCHMAN_CHECKS = [
    # 'terry.checks.models',
    # 'terry.checks.celery',
    # 'terry.checks.redis',
]

WATCHMAN_CHECKS = DEFAULT_WATCHMAN_CHECKS + CUSTOM_WATCHMAN_CHECKS

WATCHMAN_TOKEN_NAME = 'token'

# CSV
WATCHMAN_TOKENS = ','.join([
    os.environ.get('WATCHMAN_TOKEN', '5ee39ff0b5af5295ab86807c8609adff7f071a9b') ,
])

######################################################################################
#
#  LOGGING
#
######################################################################################

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '%(levelname)s %(asctime)s %(message)s'
        },
    },
    'handlers': {
        'default': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        '': {
            'handlers': ['default'],
            'level': 'INFO',
            'propagate': True,
        },
    }
}

######################################################################################
#
#  PAYMENTS
#
######################################################################################

PAYPAL_RECEIVER_EMAIL = os.environ.get('PAYPAL_RECEIVER_EMAIL', 'paypal@beagle.ai')
PAYPAL_TEST = DEBUG
PAYPAL_SANDBOX_IMAGE = "/static/img/custom-paypal-button.png"

######################################################################################
#
#  SOCIAL AUTH SETTINGS
#
######################################################################################

SOCIALACCOUNT_ADAPTER = 'portal.adapter.CustomSocialAccountAdapter'

######################################################################################
#
#  INTEGRATIONS
#
######################################################################################
AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')

SENDGRID_API_KEY = os.environ.get('SENDGRID_API_KEY', "n/a")

INTERCOM_APP_ID = os.environ.get('INTERCOM_APP_ID')
INTERCOM_API_KEY = os.environ.get('INTERCOM_API_KEY')

SLACK_WEBHOOK = os.environ.get('SLACK_WEBHOOK')
SLACK_CHANNEL = os.environ.get('SLACK_CHANNEL')

GITHUB_LOGIN_CLIENT_ID = os.environ.get('GITHUB_LOGIN_CLIENT_ID')
GITHUB_LOGIN_SECRET = os.environ.get('GITHUB_LOGIN_SECRET')

GITHUB_OAUTH_CLIENT_ID = os.environ.get('GITHUB_OAUTH_CLIENT_ID')
GITHUB_OAUTH_SECRET = os.environ.get('GITHUB_OAUTH_SECRET')

GITHUB_APP_ID = os.environ.get('GITHUB_APP_ID')
GITHUB_APP_SECRET = os.environ.get('GITHUB_APP_SECRET')

BITBUCKET_LOGIN_CLIENT_ID = os.environ.get('BITBUCKET_LOGIN_CLIENT_ID')
BITBUCKET_LOGIN_SECRET = os.environ.get('BITBUCKET_LOGIN_SECRET')

BITBUCKET_OAUTH_CLIENT_ID = os.environ.get('BITBUCKET_OAUTH_CLIENT_ID')
BITBUCKET_OAUTH_SECRET = os.environ.get('BITBUCKET_OAUTH_SECRET')

GITLAB_LOGIN_CLIENT_ID = os.environ.get('GITLAB_LOGIN_CLIENT_ID')
GITLAB_LOGIN_SECRET = os.environ.get('GITLAB_LOGIN_SECRET')

GITLAB_OAUTH_CLIENT_ID = os.environ.get('GITLAB_OAUTH_CLIENT_ID')
GITLAB_OAUTH_SECRET = os.environ.get('GITLAB_OAUTH_SECRET')


######################################################################################
#
#  CELERY
#
######################################################################################
BROKER_URL = os.environ.get('BROKER_URL')
CELERY_BROKER_URL = BROKER_URL
CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND')
CELERY_DEFAULT_QUEUE = os.environ.get('SQS_QUEUE_NAME')

# Needed for SQS
CELERY_ENABLE_REMOTE_CONTROL = False
CELERY_SEND_EVENTS = False


try:
    from app_settings.local_settings import *
except ImportError:
    print 'Local settings has not been set'
