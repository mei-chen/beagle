# Generated by Django 2.2 on 2021-03-17 21:03

import collections
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import jsonfield.fields
import model_utils.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('dataset', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BuiltInClassifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, verbose_name='UUID')),
                ('clf_type', models.CharField(choices=[('regex', 'Regular Expression'), ('builtin', 'BuiltIn Classifier'), ('trained', 'Trained Classifier')], max_length=10, verbose_name='Clf Type')),
                ('reverse', models.BooleanField(default=False, verbose_name='Reversed')),
                ('name', models.CharField(blank=True, max_length=30, verbose_name='Name')),
                ('model', models.CharField(blank=True, max_length=100, null=True, verbose_name='Model')),
                ('description', models.CharField(blank=True, max_length=5000, null=True, verbose_name='Description')),
                ('example', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Example')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('name', models.CharField(db_index=True, default=None, max_length=300, verbose_name='Name')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, verbose_name='UUID')),
                ('public', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Formula',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, verbose_name='UUID')),
                ('content', jsonfield.fields.JSONField(blank=True, load_kwargs={'object_pairs_hook': collections.OrderedDict}, null=True, verbose_name='Formula content')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RegexClassifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, verbose_name='UUID')),
                ('clf_type', models.CharField(choices=[('regex', 'Regular Expression'), ('builtin', 'BuiltIn Classifier'), ('trained', 'Trained Classifier')], max_length=10, verbose_name='Clf Type')),
                ('reverse', models.BooleanField(default=False, verbose_name='Reversed')),
                ('name', models.CharField(blank=True, max_length=30, verbose_name='Name')),
                ('expression', models.CharField(blank=True, max_length=1200, null=True, verbose_name='Expression')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TrainedClassifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, verbose_name='UUID')),
                ('clf_type', models.CharField(choices=[('regex', 'Regular Expression'), ('builtin', 'BuiltIn Classifier'), ('trained', 'Trained Classifier')], max_length=10, verbose_name='Clf Type')),
                ('reverse', models.BooleanField(default=False, verbose_name='Reversed')),
                ('name', models.CharField(blank=True, max_length=30, verbose_name='Name')),
                ('model', models.CharField(choices=[('logreg', 'Logistic Regression'), ('mlp', 'Multi-layer Perceptron'), ('rf', 'Random Forest'), ('adaboost', 'AdaBoost SVM')], default='logreg', max_length=10, verbose_name='Model')),
                ('dirty', models.BooleanField(default=True)),
                ('training', models.BooleanField(default=False)),
                ('decision_threshold', models.FloatField(default=0, verbose_name='Decision Threshold')),
                ('scores', jsonfield.fields.JSONField(blank=True, load_kwargs={'object_pairs_hook': collections.OrderedDict}, null=True, verbose_name='Scores')),
                ('datasets', models.ManyToManyField(blank=True, related_name='trained_classifiers', to='dataset.Dataset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExperimentAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('name', models.CharField(max_length=300, verbose_name='Name')),
                ('child', models.ForeignKey(help_text='Attribute classifier', on_delete=django.db.models.deletion.CASCADE, related_name='attribute_parent', to='experiment.Experiment')),
                ('parent', models.ForeignKey(help_text='Main classifier', on_delete=django.db.models.deletion.CASCADE, related_name='child_attribute', to='experiment.Experiment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='experiment',
            name='formula',
            field=models.OneToOneField(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='experiment.Formula'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='owner',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='experiments', to=settings.AUTH_USER_MODEL),
        ),
    ]
